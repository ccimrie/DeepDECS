import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.models import load_model
from sklearn import metrics

# These are used to show the confusion matrix
import plot_confusion_matrix as pltCM


(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Set some training hyper parameters
batch_size = 128
num_classes = 10
epochs = 12

# information about the shape of the input to the model
img_rows = 28
img_cols = 28
input_shape = (1, img_rows, img_cols)

# some reshaping of the data to fit the model structure
x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
input_shape = (img_rows, img_cols, 1)

# Convert and scale the data
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255 # we want the dat in the range 0 -- 1
x_test /= 255

# convert class vectors to binary class matrices
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

# This next section defines the structure of our model
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),
                 activation='relu',
                 input_shape=input_shape))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, name='dense_out', activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax'))

# Compile the model ready for use and define the loss and optimizer to use and the metrics to report.
model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.Adadelta(),
              metrics=['accuracy'])

# Now fit the model to the data
model.fit(x_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=2,
          validation_data=(x_test, y_test))
score = model.evaluate(x_test, y_test, verbose=0)

# Report the results
print('Test loss:', score[0])
print('Test accuracy:', score[1])

# Save the model
fileLocation = 'SingleModel_CNN.h5'
model.save(fileLocation)

# Show a confusion matrix for the model
model = load_model(fileLocation)

y_pred = model.predict(x_test)

matrix = metrics.confusion_matrix(y_test.argmax(axis=1), y_pred.argmax(axis=1))
pltCM.plot_confusion_matrix(matrix, normalize=False, target_names = [i for i in range(10)], title = "Confusion Matrix")

